from ml import get_result


def test_simple():
    data = """зуб один семь кариес зуб один шесть кариес зуб два шесть пломба зуб два семь пломба зуб три семь кариес
    зуб три шесть карис зуб три пять пломба зуб четыре шесть каресс зуб четыре семь каресс жалобы жалоб нет обращения"""
    assert get_result(data)['formula'] == {17: 'С', 16: 'С', 26: 'П', 27: 'П', 37: 'С', 36: 'С', 35: 'П', 46: 'С', 47: 'С'}


def test_simple_multiple():
    data = """один семь пломбоскол зуб один шесть пломбы скол зуб один пять пломба кариес зуб один четыре пломба кариес зуб
    два два пломба кариес зуб два четыре пломба кариес зуб два пять пломба кариес зуб два шесть пломба скол зуб два семь пломба скол
    зуб три восемь кариес зуб три семь пломба кариес зуб три шесть пломба кариес зуб три пять пломба скол зуб три четыре пломбы скол
    зуб четыре пять пломба кариес зуб четыре шесть пломба кариес зуб четыре семь пломба кариес зуб четыре восемь кариес"""
    assert get_result(data)['formula'] == {17: 'П, ск', 16: 'П, ск', 15: 'П/С', 14: 'П/С', 22: 'П/С', 24: 'П/С', 25: 'П/С', 26: 'П, ск', 27: 'П, ск', 38: 'С', 37: 'П/С', 36: 'П/С', 35: 'П, ск', 34: 'П, ск', 45: 'П/С', 46: 'П/С', 47: 'П/С', 48: 'С'}


def test_simple_excess():
    data = """семнадцать дефект пломба шестнадцать дефект пломба двадцать четыре кариес двадцать семь пломба
    тридцать семь пломба кариес тридцать шесть дефект пломба сорок шесть пломба сорок семь пломба
    жалобы на дискомфорт застревания пищи боль от температурных раздражителей"""
    assert get_result(data)['formula'] == {17: 'д/п', 16: 'д/п', 24: 'С', 27: 'П', 37: 'П/С', 36: 'д/п', 46: 'П', 47: 'П'}


def test_simple_empty():
    data = """жалобы на ноющую боль в области нижних зубов справа кратковременно"""
    assert get_result(data)['formula'] == {}


def test_simple_one_more():
    data = """один семь пломба один шесть пломба один пять пломба один четыре пломба два пять корень два шесть пломба
    два семь пломба два восемь отсутствует три восемь кариес три семь кариес три шесть кариес четыре два пломба четыре
    три пломба четыре шесть корень четыре семь пломба кариездентина эстетический дефект"""
    assert get_result(data)['formula'] == {17: 'П', 16: 'П', 15: 'П', 14: 'П', 25: 'R', 26: 'П', 27: 'П', 28: '0', 38: 'С', 37: 'С', 36: 'С', 42: 'П', 43: 'П', 46: 'R', 47: 'П/С, э/д'}


def test_simple_child():
    data = """осмотр пятьдесят пять карез подвижность третей степени пятьдесят четыре периодантид шестьдесят четыре кариес шестьдесят пять кариес
    семьдесят четыре кариес жалобы на свищ в"""
    result = get_result(data)
    assert result['formula'] == {55: 'С, II-III', 54: 'Pt', 64: 'С', 65: 'С', 74: 'С'}
    assert result['type'] == 'child'


def test_unrecognized_word():
    data = """один восемь хз один семь пломба скол четырнадцать кариес"""
    result = get_result(data)
    assert result['formula'] == {18: '?', 17: 'П, ск', 14: 'С'}
    assert result['unrecognized_words'] == {'хз'}
    assert result['type'] == 'adult'


def test_unrecognized_words():
    data = """один восемь хз пломба один семь пломба скол четырнадцать кариес"""
    result = get_result(data)
    assert result['formula'] == {18: 'П', 17: 'П, ск', 14: 'С'}
    assert result['unrecognized_words'] == {'хз'}


def test_unrecognized_teeth():
    data = """один хз пломба один семь пломба скол четырнадцать кариес"""
    result = get_result(data)
    assert result['formula'] == {17: 'П, ск', 14: 'С'}
    assert result['unrecognized_words'] == {'хз'}


def test_not_valid_teeth():
    data = """семь восемь пломба один семь лечен скол четырнадцать кариес"""
    result = get_result(data)
    assert result['formula'] == {17: 'П, ск', 14: 'С'}
    assert result['type'] == 'adult'


def test_unfinished():
    data = """один семь пломба скол четырнадцать кариес один пять"""
    result = get_result(data)
    assert result['formula'] == {17: 'П, ск', 14: 'С', 15: '?'}
    assert result['unrecognized_words'] == set({})


def test_skip_teeth():
    data = """пломба скол четырнадцать кариес"""
    assert get_result(data)['formula'] == {14: 'С'}


def test_one():
    data = """четырнадцать кариес"""
    assert get_result(data)['formula'] == {14: 'С'}
